重複を懸念する場合は、類似したクラスを作ることができる”継承”という機能を使用します。
これを使えば全体的にスッキリしたコードを作成することができます。

・継承を用いたクラスの定義方法
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
public class クラス名 extends 元となるクラス名 {
    親クラスとの「差分」メンバ
}
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

図における継承関係の記述方法は、下記となる。
 -------------------------------
| 親クラス			|
|（スーパークラス，基底クラス）	|
 -------------------------------
		↑
 -------------------------------
| 子クラス			|
|（サブクラス，派生クラス）		|
 -------------------------------

・正しい継承と間違った継承
is-aの原則
子クラスis-a親クラス（子クラスは親クラスの一種）
関連性のある関係でのみ継承を用いる。
関連性がないと現実世界との乖離が発生してしまうためオブジェクト思考に反する。
また、「存在するが、使ってはダメなメンバ」があるクラスは安易に使うと不備が出た際に
一気にシステムの根幹から瓦解する可能性があるため。

・汎化と特化の関係
正しい継承がis-aの関係で結ばれているのであれば、子クラスになるほど「特殊で具体的なもの」に具体化（特化）していき、
親クラスになるほど「抽象的で曖昧なもの」に一般化（汎化）していく。
継承関係において汎化と特化の関係を図にして示したものを継承ツリーといい、上に行くほど「汎化」、下に行くほど「特化」していく。

継承は「ある2つのクラスに特化と汎化の関係があることを示す」ための道具である。